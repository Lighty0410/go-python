linters-settings:
  dupl:
    threshold: 100
  funlen:
    lines: 300
    statements: 50
  goconst:
    min-len: 2
    min-occurrences: 2
  gocritic:
    enabled-tags:
      - diagnostic
      - performance
      - style
    disabled-checks:
      - hugeParam
      - rangeValCopy
  gocyclo:
    min-complexity: 10
  goimports:
    local-prefixes: github.com/golangci/golangci-lint
  golint:
    min-confidence: 0
  gosec:
    settings:
      exclude:
        - "G102"
  govet:
    check-shadowing: true
  lll:
    line-length: 140
  maligned:
    suggest-new: true
  misspell:
    locale: US
linters:
  enable:
    - bodyclose         # checks whether HTTP response body is closed successfully -
    - deadcode          # Finds unused code
    - depguard          # Go linter that checks if package imports are in a list of acceptable packages
    - dogsled           # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    #    - dupl              # Tool for code clone detection
    - errcheck          # Errcheck is a program for checking for unchecked errors in go programs
    - funlen            # Tool for detection of long functions
    - gochecknoglobals  # Checks that no globals are present in Go code
    - gochecknoinits    # Checks that no init functions are present in Go code
    - goconst           # Finds repeated strings that could be replaced by a constant
    - gocritic          # The most opinionated Go source code linter
    - gocyclo           # Computes and checks the cyclomatic complexity of functions
    - godox             # Tool for detection of FIXME, TODO and other comment keywords
    - gofmt             # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - goimports         # Goimports does everything that gofmt does. Additionally it checks unused imports
    - golint            # Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
    - gosimple          # Linter for Go source code that specializes in simplifying a code
    - govet             # (vet, vetshadow): Vet examines Go source code and reports suspicious constructs
    - ineffassign       # Detects when assignments to existing variables are not used
    - interfacer        # Linter that suggests narrower interface types
    - lll               # Reports long lines [fast: true, auto-fix: false]
    - maligned          # Tool to detect Go structs that would take less memory if their fields were sorted
    - misspell          # Finds commonly misspelled English words in comments
    - nakedret          # Finds naked returns in functions greater than a specified function length
    - prealloc          # Finds slice declarations that could potentially be preallocated
    - staticcheck       # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - structcheck       # Finds unused struct fields
    - stylecheck        # Stylecheck is a replacement for golint
    - typecheck         # Like the front-end of a Go compiler, parses and type-checks Go code
    - unconvert         # Remove unnecessary type conversions
    - unparam           # Reports unused function parameters
    - unused            # Checks Go code for unused constants, variables, functions and types
    - varcheck          # Finds unused global variables and constants [fast: true, auto-fix: false]
    - whitespace        # Tool for detection of leading and trailing whitespace [fast: true, auto-fix: true]
run:
  skip-dirs:
    - test/testdata_etc
    - pkg/golinters/goanalysis/(checker|passes)
issues:
  exclude-use-default: false
  exclude-rules:
    - text: weak cryptographic primitive
      linters:
        - gosec
    - text: Binds to all network interfaces
      linters:
        - gosec
    - text: Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked
      linters:
        - errcheck
    - text: (should have a package comment)
      linters:
        - golint
    - linters:
        - lll
        - golint
      source: "^//go:generate "
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - funlen



  exclude:
    - '^ST1000'
service:
  golangci-lint-version: 1.19.x
  prepare:
    - echo "here I can run custom commands, but no preparation needed for this repo"